{
  "openapi": "3.0.1",
  "info": {
    "title": "Service Provider API (Beta)",
    "version": "1"
  },
  "paths": {
    "/customer-catalogs/{customerId}/catalog-items-pricing": {
      "post": {
        "tags": [
          "CustomerCatalogs"
        ],
        "summary": "GetCustomerCatalogItemsPricingInformation (beta)",
        "operationId": "GetCustomerCatalogItemsPricingInformation",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCustomerCatalogItemsPricingInformationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCustomerCatalogItemsPricingInformationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetCustomerCatalogItemsPricingInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCatalogItemsPricingInformationDto"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/platforms-configurations": {
      "get": {
        "tags": [
          "CustomerPlatformsConfigurations"
        ],
        "summary": "GetCustomerPlatformsConfigurations (beta)",
        "description": "Get the list of all configured platforms for a customer.",
        "operationId": "GetCustomerPlatformsConfigurations",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerConfiguredPlatforms"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerPlatformsConfigurations"
        ],
        "summary": "ConfigurePlatforms (beta)",
        "description": "Configure platforms required parameters.",
        "operationId": "ConfigurePlatforms",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurePlatformsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "GetCustomers (beta)",
        "description": "Get the list of all your customers.",
        "operationId": "GetCustomers",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customers"
                }
              }
            }
          }
        }
      }
    },
    "/platforms": {
      "get": {
        "tags": [
          "Platforms"
        ],
        "summary": "GetAllPlatforms (beta)",
        "description": "Get the list of all available platforms.",
        "operationId": "GetAllPlatforms",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformsCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platforms/platforms-for-skus": {
      "post": {
        "tags": [
          "Platforms"
        ],
        "summary": "GetPlatformsForSkus (beta)",
        "description": "Get the list of all platforms associated to the provided Skus.\r\nSpecifying multiple language tags in Accept-Language header will generate translations for each of them.\r\nCultureInfo.InvariantCulture (\"iv\") is used as a fallback when language tags were not provided or not supported.",
        "operationId": "GetPlatformsForSkus",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPlatformsForSkusRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPlatformsForSkusRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetPlatformsForSkusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformsForSkusCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platforms/required-parameters": {
      "post": {
        "tags": [
          "Platforms"
        ],
        "summary": "GetPlatformRequiredParameters (beta)",
        "description": "Get the list of required parameters for selected platforms.\r\nSpecifying multiple language tags in Accept-Language header will generate translations for each of them.\r\nCultureInfo.InvariantCulture (\"iv\") is used as a fallback when language tags were not provided or not supported.",
        "operationId": "GetPlatformRequiredParameters",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPlatformRequiredParametersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPlatformRequiredParametersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetPlatformRequiredParametersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformRequiredParametersCollection"
                }
              }
            }
          }
        }
      }
    },
    "/billing/receivable-charges": {
      "get": {
        "tags": [
          "ReceivableCharges"
        ],
        "summary": "GetReceivableCharges (beta)",
        "description": "Get the amounts that one of your customers owe you for a specific billing period. There are three types of charges that are included in the data returned: recurring, usage, and setup.\r\n<div style=\"color:#FF9B00;background-color:#FCF8E3;padding:1rem;border-radius:5px;border:1px solid #FF9B00;display:inline-block\"><svg width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\" /></svg> For the time being, you cannot use the Service Provider API rebilling feature (<i>GetReceivableCharges</i> endpoint) while having a PSA integration enabled.</div>",
        "operationId": "GetReceivableCharges",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Specify a date within the desired billing period. Format: yyyy-MM-dd (UTC). Default: Today. For example, if the date is March 17th and your billing period is from the 1st to the 31st of the month, it will return data from March 1st to March 31st.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableCharges"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "GetSubscriptions (beta)",
        "description": "Get the list of subscriptions for one of your customers.",
        "operationId": "GetCustomerSubscriptions",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscriptions/amendments": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "CreateSubscriptionsAmendment (beta)",
        "description": "Amend subscription quantities for one of your customers.",
        "operationId": "CreateSubscriptionsAmendment",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionsAmendmentParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionsAmendment"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscriptions/amendments/{subscriptionsAmendmentId}/status": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "GetSubscriptionsAmendmentStatus (beta)",
        "description": "Get the status of a subscriptions amendment.",
        "operationId": "GetSubscriptionsAmendmentStatus",
        "parameters": [
          {
            "name": "subscriptionsAmendmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language].",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionsAmendmentStatus"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BillingCycleType": {
        "enum": [
          "Daily",
          "Weekly",
          "Monthly",
          "Yearly"
        ],
        "type": "string",
        "description": "Represents the billing cycle types for a subscription or contract."
      },
      "CatalogItemPricingInformationDto": {
        "required": [
          "catalogItemId",
          "pricingInformation",
          "sku"
        ],
        "type": "object",
        "properties": {
          "catalogItemId": {
            "type": "string",
            "format": "uuid"
          },
          "sku": {
            "minLength": 1,
            "type": "string"
          },
          "pricingInformation": {
            "$ref": "#/components/schemas/PricingInformationDto"
          }
        },
        "additionalProperties": false
      },
      "Charge": {
        "required": [
          "chargeName",
          "chargeType",
          "costPrice",
          "costPriceProrated",
          "currency",
          "isProratable",
          "periodFrom",
          "periodTo",
          "productName",
          "quantity",
          "sku"
        ],
        "type": "object",
        "properties": {
          "productName": {
            "minLength": 1,
            "type": "string"
          },
          "sku": {
            "minLength": 1,
            "type": "string"
          },
          "chargeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "chargeName": {
            "minLength": 1,
            "type": "string"
          },
          "chargeType": {
            "$ref": "#/components/schemas/ChargeType"
          },
          "billingCycleType": {
            "$ref": "#/components/schemas/ReceivableBillingCycleType"
          },
          "periodFrom": {
            "type": "string",
            "format": "date"
          },
          "periodTo": {
            "type": "string",
            "format": "date"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "costPrice": {
            "type": "number",
            "description": "Price paid per unit.",
            "format": "double"
          },
          "costPriceProrated": {
            "type": "number",
            "description": "Prorated price paid per unit.",
            "format": "double"
          },
          "currency": {
            "minLength": 1,
            "type": "string"
          },
          "isProratable": {
            "type": "boolean",
            "description": "Indicates whether or not the price of the charge is proratable."
          }
        },
        "additionalProperties": false,
        "description": "A product is constituted of one or multiple charges."
      },
      "ChargeType": {
        "enum": [
          "Setup",
          "Recurring",
          "Usage",
          "Unknown"
        ],
        "type": "string",
        "description": "Setup (occurs only once and can be used for activation, cancellation or setup fees),\r\nRecurring (invoiced on a monthly or yearly basis),\r\nUsage (varies based on the quantity of the product or service consumed by the customer),\r\nUnknown (charge type not found. This may happen when querying data from older invoices)."
      },
      "Choice": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Translation"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CommitmentTermType": {
        "enum": [
          "Monthly",
          "Annual",
          "Biennial",
          "Triennial"
        ],
        "type": "string",
        "description": "Represents the commitment term types for a subscription."
      },
      "CommittedMinimalQuantity": {
        "required": [
          "committedUntil",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "committedUntil": {
            "type": "string",
            "description": "Format: yyyy-MM-ddTHH:mm:ss.fffffffK (UTC). Example : 2024-11-21T20:27:05.7613888",
            "format": "date"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The date until which the subscription quantity may be decreased down to this minimal quantity"
      },
      "ConfigurePlatformsRequest": {
        "required": [
          "platformConfigurations"
        ],
        "type": "object",
        "properties": {
          "platformConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformConfiguration"
            }
          }
        },
        "additionalProperties": false
      },
      "ConfiguredPlatform": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateSubscriptionsAmendmentParameters": {
        "type": "object",
        "properties": {
          "subscriptionAmendmentParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionsAmendmentParameter"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Currency": {
        "enum": [
          "Undefined",
          "Cad",
          "Usd",
          "Eur",
          "Gbp"
        ],
        "type": "string",
        "description": "Undefined,\r\nCad (Canadian Dollar),\r\nUsd (US Dollar),\r\nEur (Euro),\r\nGbp (British pound sterling)."
      },
      "Customer": {
        "required": [
          "displayName",
          "id",
          "path"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "displayName": {
            "minLength": 1,
            "type": "string",
            "readOnly": true
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "suspendedOn": {
            "type": "string",
            "description": "Format: yyyy-MM-ddTHH:mm:ss.fffffffK (UTC). Example : 2021-01-13T20:30:05.7613888",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomerCatalogItemsPricingInformationDto": {
        "required": [
          "catalogItems",
          "customerId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "catalogItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogItemPricingInformationDto"
            }
          }
        },
        "additionalProperties": false
      },
      "CustomerConfiguredPlatforms": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "format": "uuid"
          },
          "configuredPlatforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfiguredPlatform"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Customers": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Format": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "pattern": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Choice"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetCustomerCatalogItemsPricingInformationRequest": {
        "required": [
          "skus"
        ],
        "type": "object",
        "properties": {
          "skus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "GetPlatformRequiredParametersRequest": {
        "required": [
          "platformIds"
        ],
        "type": "object",
        "properties": {
          "platformIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "GetPlatformsForSkusRequest": {
        "required": [
          "skus"
        ],
        "type": "object",
        "properties": {
          "skus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Platform": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Translation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatformConfiguration": {
        "required": [
          "platformId"
        ],
        "type": "object",
        "properties": {
          "platformId": {
            "type": "string",
            "format": "uuid"
          },
          "requiredParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequiredParameter"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatformRequiredParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Translation"
            },
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Translation"
            },
            "nullable": true,
            "readOnly": true
          },
          "identifier": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "defaultValue": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "format": {
            "$ref": "#/components/schemas/Format"
          }
        },
        "additionalProperties": false
      },
      "PlatformRequiredParameters": {
        "required": [
          "platformId"
        ],
        "type": "object",
        "properties": {
          "platformId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformRequiredParameter"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PlatformRequiredParametersCollection": {
        "type": "object",
        "properties": {
          "requiredParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformRequiredParameters"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PlatformsCollection": {
        "type": "object",
        "properties": {
          "platforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Platform"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatformsForSkusCollection": {
        "type": "object",
        "properties": {
          "skusPlatforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkuPlatforms"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingInformationDto": {
        "required": [
          "currency",
          "recurringFee",
          "setupFee"
        ],
        "type": "object",
        "properties": {
          "recurringFee": {
            "type": "number",
            "description": "The recurring amount charge every cycle",
            "format": "double"
          },
          "setupFee": {
            "type": "number",
            "description": "The initial amount charge at the end of the first cycle",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "billingCycle": {
            "$ref": "#/components/schemas/BillingCycleType"
          },
          "commitmentTerm": {
            "$ref": "#/components/schemas/CommitmentTermType"
          }
        },
        "additionalProperties": false
      },
      "ReceivableBillingCycleType": {
        "enum": [
          "OneTime",
          "Monthly",
          "Yearly"
        ],
        "type": "string",
        "description": "OneTime (charged once, with no recurrence),\r\nMonthly (charged monthly),\r\nYearly (charged yearly)."
      },
      "ReceivableCharges": {
        "required": [
          "charges",
          "periodFrom",
          "periodTo"
        ],
        "type": "object",
        "properties": {
          "periodFrom": {
            "type": "string",
            "format": "date"
          },
          "periodTo": {
            "type": "string",
            "format": "date"
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Charge"
            }
          }
        },
        "additionalProperties": false,
        "description": "All charges to pay for a billing period."
      },
      "RequiredParameter": {
        "required": [
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SkuPlatforms": {
        "required": [
          "sku"
        ],
        "type": "object",
        "properties": {
          "sku": {
            "minLength": 1,
            "type": "string"
          },
          "platformIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Subscription": {
        "required": [
          "billingCycle",
          "description",
          "id",
          "productName",
          "purchaseDate",
          "quantity",
          "sku"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "productName": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "sku": {
            "minLength": 1,
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "billingCycle": {
            "minLength": 1,
            "type": "string",
            "description": "A billing cycle, also referred to as a billing period, is the interval of time between billing statements.\r\nAlthough billing cycles are most often set at one month, or one year, they may vary in length depending on the SKU.\r\nPossible values: none, daily, weekly, monthly, yearly and unknown"
          },
          "purchaseDate": {
            "type": "string",
            "description": "Format: yyyy-MM-ddTHH:mm:ss.fffffffK (UTC). Example : 2023-11-21T20:27:05.7613888",
            "format": "date-time"
          },
          "fees": {
            "$ref": "#/components/schemas/SubscriptionFees"
          },
          "commitmentTerm": {
            "$ref": "#/components/schemas/SubscriptionCommitmentTerm"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionCommitmentTerm": {
        "required": [
          "termEndDate",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CommitmentTermType"
          },
          "termEndDate": {
            "type": "string",
            "description": "The last day of the commitment term",
            "format": "date"
          },
          "renewalConfiguration": {
            "$ref": "#/components/schemas/SubscriptionRenewalConfiguration"
          },
          "committedMinimalQuantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommittedMinimalQuantity"
            },
            "description": "The dates until which the subscription quantity may be decreased down to those minimal quantities.\r\nSubscription amendments and renewals impact the results. For example, a monthly subscription is\r\nbought with 10 licenses on feb 1st, and on feb 2nd an amendment +5 is made. The CommittedMinimalQuantities\r\non feb 2nd would give the possibility to decrease down to 0 until feb 8 (the end of the initial grace period),\r\nand down to 10 until feb 9 (the end of the amendment grace period).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Null for subscriptions that are not tied to a commitment",
        "nullable": true
      },
      "SubscriptionFees": {
        "required": [
          "currency",
          "recurringFee",
          "setupFee"
        ],
        "type": "object",
        "properties": {
          "recurringFee": {
            "type": "number",
            "description": "The recurring amount charge every cycle",
            "format": "double"
          },
          "setupFee": {
            "type": "number",
            "description": "The initial amount charge at the end of the first cycle",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        },
        "additionalProperties": false,
        "description": "Null for subscriptions that have no corresponding catalog item",
        "nullable": true
      },
      "SubscriptionRenewalConfiguration": {
        "required": [
          "renewalDate"
        ],
        "type": "object",
        "properties": {
          "renewalDate": {
            "type": "string",
            "description": "The first day of the next commitment term",
            "format": "date"
          },
          "scheduledQuantity": {
            "type": "integer",
            "description": "In the absence of a ScheduledQuantity, the subscription will renew with the existing quantity",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Null for subscriptions that will not auto-renew at the end of the commitment term",
        "nullable": true
      },
      "Subscriptions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionsAmendment": {
        "type": "object",
        "properties": {
          "subscriptionsAmendmentId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionsAmendmentParameter": {
        "required": [
          "newQuantity",
          "subscriptionId"
        ],
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "newQuantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Subscription ID to amend, paired with its new intended quantity."
      },
      "SubscriptionsAmendmentStatus": {
        "enum": [
          "Pending",
          "Processing",
          "Success",
          "Failure",
          "Canceled",
          "PartialSuccess"
        ],
        "type": "string"
      },
      "Translation": {
        "required": [
          "culture",
          "value"
        ],
        "type": "object",
        "properties": {
          "culture": {
            "minLength": 1,
            "type": "string",
            "description": "The Two-Letter ISO Language Code (ISO 639-1)"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.ServiceProvider.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CustomerPlatformMeterUsagesDto
    {
        /// <summary>
        /// Initializes a new instance of the CustomerPlatformMeterUsagesDto
        /// class.
        /// </summary>
        public CustomerPlatformMeterUsagesDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomerPlatformMeterUsagesDto
        /// class.
        /// </summary>
        public CustomerPlatformMeterUsagesDto(System.Guid customerId, System.Guid platformId, IList<MeterUsageDto> meterUsages)
        {
            CustomerId = customerId;
            PlatformId = platformId;
            MeterUsages = meterUsages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customerId")]
        public System.Guid CustomerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "platformId")]
        public System.Guid PlatformId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "meterUsages")]
        public IList<MeterUsageDto> MeterUsages { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MeterUsages == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MeterUsages");
            }
            if (MeterUsages != null)
            {
                foreach (var element in MeterUsages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

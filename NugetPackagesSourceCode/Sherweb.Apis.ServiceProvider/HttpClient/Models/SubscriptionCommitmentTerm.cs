// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.ServiceProvider.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Null for subscriptions that are not tied to a commitment
    /// </summary>
    public partial class SubscriptionCommitmentTerm
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionCommitmentTerm class.
        /// </summary>
        public SubscriptionCommitmentTerm()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubscriptionCommitmentTerm class.
        /// </summary>
        /// <param name="type">Possible values include: 'Monthly', 'Annual',
        /// 'Biennial', 'Triennial'</param>
        /// <param name="termEndDate">The last day of the commitment
        /// term</param>
        /// <param name="committedMinimalQuantities">The dates until which the
        /// subscription quantity may be decreased down to those minimal
        /// quantities.
        /// Subscription amendments and renewals impact the results. For
        /// example, a monthly subscription is
        /// bought with 10 licenses on feb 1st, and on feb 2nd an amendment +5
        /// is made. The CommittedMinimalQuantities
        /// on feb 2nd would give the possibility to decrease down to 0 until
        /// feb 8 (the end of the initial grace period),
        /// and down to 10 until feb 9 (the end of the amendment grace
        /// period).</param>
        public SubscriptionCommitmentTerm(string type, System.DateTime termEndDate, SubscriptionRenewalConfiguration renewalConfiguration = default(SubscriptionRenewalConfiguration), IList<CommittedMinimalQuantity> committedMinimalQuantities = default(IList<CommittedMinimalQuantity>))
        {
            Type = type;
            TermEndDate = termEndDate;
            RenewalConfiguration = renewalConfiguration;
            CommittedMinimalQuantities = committedMinimalQuantities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Monthly', 'Annual',
        /// 'Biennial', 'Triennial'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the last day of the commitment term
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "termEndDate")]
        public System.DateTime TermEndDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "renewalConfiguration")]
        public SubscriptionRenewalConfiguration RenewalConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the dates until which the subscription quantity may be
        /// decreased down to those minimal quantities.
        /// Subscription amendments and renewals impact the results. For
        /// example, a monthly subscription is
        /// bought with 10 licenses on feb 1st, and on feb 2nd an amendment +5
        /// is made. The CommittedMinimalQuantities
        /// on feb 2nd would give the possibility to decrease down to 0 until
        /// feb 8 (the end of the initial grace period),
        /// and down to 10 until feb 9 (the end of the amendment grace period).
        /// </summary>
        [JsonProperty(PropertyName = "committedMinimalQuantities")]
        public IList<CommittedMinimalQuantity> CommittedMinimalQuantities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (RenewalConfiguration != null)
            {
                RenewalConfiguration.Validate();
            }
            if (CommittedMinimalQuantities != null)
            {
                foreach (var element in CommittedMinimalQuantities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}

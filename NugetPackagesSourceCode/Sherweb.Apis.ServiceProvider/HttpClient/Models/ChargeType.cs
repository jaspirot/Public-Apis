// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Sherweb.Apis.ServiceProvider.Models
{
    /// <summary>
    /// Setup (occurs only once and can be used for activation, cancellation or setup fees),
    /// 
    /// Recurring (invoiced on a monthly or yearly basis),
    /// 
    /// Usage (varies based on the quantity of the product or service consumed by the customer),
    /// 
    /// Unknown (charge type not found. This may happen when querying data from older invoices).
    /// </summary>
    public readonly partial struct ChargeType : IEquatable<ChargeType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ChargeType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ChargeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SetupValue = "Setup";
        private const string RecurringValue = "Recurring";
        private const string UsageValue = "Usage";
        private const string UnknownValue = "Unknown";

        /// <summary> Setup. </summary>
        public static ChargeType Setup { get; } = new ChargeType(SetupValue);
        /// <summary> Recurring. </summary>
        public static ChargeType Recurring { get; } = new ChargeType(RecurringValue);
        /// <summary> Usage. </summary>
        public static ChargeType Usage { get; } = new ChargeType(UsageValue);
        /// <summary> Unknown. </summary>
        public static ChargeType Unknown { get; } = new ChargeType(UnknownValue);
        /// <summary> Determines if two <see cref="ChargeType"/> values are the same. </summary>
        public static bool operator ==(ChargeType left, ChargeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ChargeType"/> values are not the same. </summary>
        public static bool operator !=(ChargeType left, ChargeType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ChargeType"/>. </summary>
        public static implicit operator ChargeType(string value) => new ChargeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChargeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ChargeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}

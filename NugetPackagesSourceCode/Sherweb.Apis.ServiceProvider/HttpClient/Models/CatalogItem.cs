// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.ServiceProvider.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CatalogItem
    {
        /// <summary>
        /// Initializes a new instance of the CatalogItem class.
        /// </summary>
        public CatalogItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CatalogItem class.
        /// </summary>
        /// <param name="billingCycle">A billing cycle, also referred to as a
        /// billing period, is the interval of time between billing statements.
        /// Although billing cycles are most often set at one month, or one
        /// year, they may vary in length depending on the SKU.
        /// Possible values: monthly, yearly, once</param>
        /// <param name="commitmentTerm">The duration for which the catalog
        /// item must be kept and paid for once purchased.
        /// An open commitment term means it is not tied to a commitment
        /// period.
        /// Possible values: monthly, yearly, biennial, triennial, open</param>
        public CatalogItem(string sku, IList<Translation> name, IList<Translation> description, string vendor, string billingCycle, string commitmentTerm)
        {
            Sku = sku;
            Name = name;
            Description = description;
            Vendor = vendor;
            BillingCycle = billingCycle;
            CommitmentTerm = commitmentTerm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public string Sku { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public IList<Translation> Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public IList<Translation> Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vendor")]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or sets a billing cycle, also referred to as a billing period,
        /// is the interval of time between billing statements.
        /// Although billing cycles are most often set at one month, or one
        /// year, they may vary in length depending on the SKU.
        /// Possible values: monthly, yearly, once
        /// </summary>
        [JsonProperty(PropertyName = "billingCycle")]
        public string BillingCycle { get; set; }

        /// <summary>
        /// Gets or sets the duration for which the catalog item must be kept
        /// and paid for once purchased.
        /// An open commitment term means it is not tied to a commitment
        /// period.
        /// Possible values: monthly, yearly, biennial, triennial, open
        /// </summary>
        [JsonProperty(PropertyName = "commitmentTerm")]
        public string CommitmentTerm { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sku");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (Vendor == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Vendor");
            }
            if (BillingCycle == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BillingCycle");
            }
            if (CommitmentTerm == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommitmentTerm");
            }
            if (Name != null)
            {
                foreach (var element in Name)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Description != null)
            {
                foreach (var element1 in Description)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}

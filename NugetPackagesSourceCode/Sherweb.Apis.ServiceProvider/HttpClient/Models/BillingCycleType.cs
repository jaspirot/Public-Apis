// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Sherweb.Apis.ServiceProvider.Models
{
    /// <summary>
    /// OneTime (charged once, with no recurrence),
    /// 
    /// Monthly (charged monthly),
    /// 
    /// Yearly (charged yearly).
    /// </summary>
    public readonly partial struct BillingCycleType : IEquatable<BillingCycleType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="BillingCycleType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BillingCycleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OneTimeValue = "OneTime";
        private const string MonthlyValue = "Monthly";
        private const string YearlyValue = "Yearly";

        /// <summary> OneTime. </summary>
        public static BillingCycleType OneTime { get; } = new BillingCycleType(OneTimeValue);
        /// <summary> Monthly. </summary>
        public static BillingCycleType Monthly { get; } = new BillingCycleType(MonthlyValue);
        /// <summary> Yearly. </summary>
        public static BillingCycleType Yearly { get; } = new BillingCycleType(YearlyValue);
        /// <summary> Determines if two <see cref="BillingCycleType"/> values are the same. </summary>
        public static bool operator ==(BillingCycleType left, BillingCycleType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BillingCycleType"/> values are not the same. </summary>
        public static bool operator !=(BillingCycleType left, BillingCycleType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BillingCycleType"/>. </summary>
        public static implicit operator BillingCycleType(string value) => new BillingCycleType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BillingCycleType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BillingCycleType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}

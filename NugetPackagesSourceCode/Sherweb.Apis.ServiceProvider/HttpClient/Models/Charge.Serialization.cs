// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Sherweb.Apis.ServiceProvider.Models
{
    public partial class Charge
    {
        internal static Charge DeserializeCharge(JsonElement element)
        {
            Optional<string> productName = default;
            Optional<string> sku = default;
            Optional<Guid?> chargeId = default;
            Optional<string> chargeName = default;
            Optional<ChargeType> chargeType = default;
            Optional<BillingCycleType> billingCycleType = default;
            Optional<DateTimeOffset> periodFrom = default;
            Optional<DateTimeOffset> periodTo = default;
            Optional<double> quantity = default;
            Optional<double> costPrice = default;
            Optional<double> costPriceProrated = default;
            Optional<string> currency = default;
            Optional<bool> isProratable = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("productName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        productName = null;
                        continue;
                    }
                    productName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sku"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sku = null;
                        continue;
                    }
                    sku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("chargeId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        chargeId = null;
                        continue;
                    }
                    chargeId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("chargeName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        chargeName = null;
                        continue;
                    }
                    chargeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("chargeType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    chargeType = new ChargeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("billingCycleType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    billingCycleType = new BillingCycleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("periodFrom"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    periodFrom = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("periodTo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    periodTo = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("quantity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    quantity = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("costPrice"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    costPrice = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("costPriceProrated"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    costPriceProrated = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("currency"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        currency = null;
                        continue;
                    }
                    currency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isProratable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isProratable = property.Value.GetBoolean();
                    continue;
                }
            }
            return new Charge(productName.Value, sku.Value, Optional.ToNullable(chargeId), chargeName.Value, Optional.ToNullable(chargeType), Optional.ToNullable(billingCycleType), Optional.ToNullable(periodFrom), Optional.ToNullable(periodTo), Optional.ToNullable(quantity), Optional.ToNullable(costPrice), Optional.ToNullable(costPriceProrated), currency.Value, Optional.ToNullable(isProratable));
        }
    }
}

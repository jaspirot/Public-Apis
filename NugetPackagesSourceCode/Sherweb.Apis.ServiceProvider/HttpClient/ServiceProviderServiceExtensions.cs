// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.ServiceProvider
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceProviderService.
    /// </summary>
    public static partial class ServiceProviderServiceExtensions
    {
            /// <summary>
            /// GetCustomerCatalog (beta)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static CustomerCatalog GetCustomerCatalog(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string))
            {
                return operations.GetCustomerCatalogAsync(customerId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetCustomerCatalog (beta)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerCatalog> GetCustomerCatalogAsync(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerCatalogWithHttpMessagesAsync(customerId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetCustomerCatalogItemsPricingInformation (beta)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static CustomerCatalogItemsPricingInformationDto GetCustomerCatalogItemsPricingInformation(this IServiceProviderService operations, System.Guid customerId, GetCustomerCatalogItemsPricingInformationRequest body = default(GetCustomerCatalogItemsPricingInformationRequest), string acceptLanguage = default(string))
            {
                return operations.GetCustomerCatalogItemsPricingInformationAsync(customerId, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetCustomerCatalogItemsPricingInformation (beta)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerCatalogItemsPricingInformationDto> GetCustomerCatalogItemsPricingInformationAsync(this IServiceProviderService operations, System.Guid customerId, GetCustomerCatalogItemsPricingInformationRequest body = default(GetCustomerCatalogItemsPricingInformationRequest), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerCatalogItemsPricingInformationWithHttpMessagesAsync(customerId, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetCustomerPlatformsConfigurations (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all configured platforms for a customer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static CustomerConfiguredPlatforms GetCustomerPlatformsConfigurations(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string))
            {
                return operations.GetCustomerPlatformsConfigurationsAsync(customerId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetCustomerPlatformsConfigurations (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all configured platforms for a customer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerConfiguredPlatforms> GetCustomerPlatformsConfigurationsAsync(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerPlatformsConfigurationsWithHttpMessagesAsync(customerId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ConfigurePlatforms (beta)
            /// </summary>
            /// <remarks>
            /// Configure platforms required parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static void ConfigurePlatforms(this IServiceProviderService operations, System.Guid customerId, ConfigurePlatformsRequest body = default(ConfigurePlatformsRequest), string acceptLanguage = default(string))
            {
                operations.ConfigurePlatformsAsync(customerId, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// ConfigurePlatforms (beta)
            /// </summary>
            /// <remarks>
            /// Configure platforms required parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConfigurePlatformsAsync(this IServiceProviderService operations, System.Guid customerId, ConfigurePlatformsRequest body = default(ConfigurePlatformsRequest), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ConfigurePlatformsWithHttpMessagesAsync(customerId, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// GetCustomers (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static Customers GetCustomers(this IServiceProviderService operations, string acceptLanguage = default(string))
            {
                return operations.GetCustomersAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetCustomers (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Customers> GetCustomersAsync(this IServiceProviderService operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomersWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetAllPlatforms (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all available platforms.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static PlatformsCollection GetAllPlatforms(this IServiceProviderService operations, string acceptLanguage = default(string))
            {
                return operations.GetAllPlatformsAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetAllPlatforms (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all available platforms.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlatformsCollection> GetAllPlatformsAsync(this IServiceProviderService operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPlatformsWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetPlatformsForSkus (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all platforms associated to the provided Skus.
            /// Specifying multiple language tags in Accept-Language header will generate
            /// translations for each of them.
            /// CultureInfo.InvariantCulture ("iv") is used as a fallback when language
            /// tags were not provided or not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static PlatformsForSkusCollection GetPlatformsForSkus(this IServiceProviderService operations, GetPlatformsForSkusRequest body = default(GetPlatformsForSkusRequest), string acceptLanguage = default(string))
            {
                return operations.GetPlatformsForSkusAsync(body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetPlatformsForSkus (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all platforms associated to the provided Skus.
            /// Specifying multiple language tags in Accept-Language header will generate
            /// translations for each of them.
            /// CultureInfo.InvariantCulture ("iv") is used as a fallback when language
            /// tags were not provided or not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlatformsForSkusCollection> GetPlatformsForSkusAsync(this IServiceProviderService operations, GetPlatformsForSkusRequest body = default(GetPlatformsForSkusRequest), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlatformsForSkusWithHttpMessagesAsync(body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetPlatformRequiredParameters (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of required parameters for selected platforms.
            /// Specifying multiple language tags in Accept-Language header will generate
            /// translations for each of them.
            /// CultureInfo.InvariantCulture ("iv") is used as a fallback when language
            /// tags were not provided or not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static PlatformRequiredParametersCollection GetPlatformRequiredParameters(this IServiceProviderService operations, GetPlatformRequiredParametersRequest body = default(GetPlatformRequiredParametersRequest), string acceptLanguage = default(string))
            {
                return operations.GetPlatformRequiredParametersAsync(body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetPlatformRequiredParameters (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of required parameters for selected platforms.
            /// Specifying multiple language tags in Accept-Language header will generate
            /// translations for each of them.
            /// CultureInfo.InvariantCulture ("iv") is used as a fallback when language
            /// tags were not provided or not supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlatformRequiredParametersCollection> GetPlatformRequiredParametersAsync(this IServiceProviderService operations, GetPlatformRequiredParametersRequest body = default(GetPlatformRequiredParametersRequest), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlatformRequiredParametersWithHttpMessagesAsync(body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetReceivableCharges (beta)
            /// </summary>
            /// <remarks>
            /// Get the amounts that one of your customers owe you for a specific billing
            /// period. There are three types of charges that are included in the data
            /// returned: recurring, usage, and setup.
            /// &lt;div
            /// style="color:#FF9B00;background-color:#FCF8E3;padding:1rem;border-radius:5px;border:1px
            /// solid #FF9B00;display:inline-block"&gt;&lt;svg width="16" height="16"
            /// fill="currentColor" viewBox="0 0 16 16"&gt;&lt;path d="M8.982 1.566a1.13
            /// 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0
            /// 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35
            /// 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0
            /// 2 1 1 0 0 1 0-2z" /&gt;&lt;/svg&gt;
            /// For the time being, you cannot use the Service Provider API rebilling
            /// feature (&lt;i&gt;GetReceivableCharges&lt;/i&gt; endpoint) while having a
            /// PSA integration enabled.
            /// &lt;/div&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='date'>
            /// Specify a date within the desired billing period. Format: yyyy-MM-dd (UTC).
            /// Default: Today. For example, if the date is March 17th and your billing
            /// period is from the 1st to the 31st of the month, it will return data from
            /// March 1st to March 31st.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static ReceivableCharges GetReceivableCharges(this IServiceProviderService operations, System.Guid customerId, System.DateTime? date = default(System.DateTime?), string acceptLanguage = default(string))
            {
                return operations.GetReceivableChargesAsync(customerId, date, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetReceivableCharges (beta)
            /// </summary>
            /// <remarks>
            /// Get the amounts that one of your customers owe you for a specific billing
            /// period. There are three types of charges that are included in the data
            /// returned: recurring, usage, and setup.
            /// &lt;div
            /// style="color:#FF9B00;background-color:#FCF8E3;padding:1rem;border-radius:5px;border:1px
            /// solid #FF9B00;display:inline-block"&gt;&lt;svg width="16" height="16"
            /// fill="currentColor" viewBox="0 0 16 16"&gt;&lt;path d="M8.982 1.566a1.13
            /// 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0
            /// 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35
            /// 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0
            /// 2 1 1 0 0 1 0-2z" /&gt;&lt;/svg&gt;
            /// For the time being, you cannot use the Service Provider API rebilling
            /// feature (&lt;i&gt;GetReceivableCharges&lt;/i&gt; endpoint) while having a
            /// PSA integration enabled.
            /// &lt;/div&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='date'>
            /// Specify a date within the desired billing period. Format: yyyy-MM-dd (UTC).
            /// Default: Today. For example, if the date is March 17th and your billing
            /// period is from the 1st to the 31st of the month, it will return data from
            /// March 1st to March 31st.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReceivableCharges> GetReceivableChargesAsync(this IServiceProviderService operations, System.Guid customerId, System.DateTime? date = default(System.DateTime?), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReceivableChargesWithHttpMessagesAsync(customerId, date, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetSubscriptions (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of subscriptions for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static Subscriptions GetCustomerSubscriptions(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string))
            {
                return operations.GetCustomerSubscriptionsAsync(customerId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetSubscriptions (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of subscriptions for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscriptions> GetCustomerSubscriptionsAsync(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerSubscriptionsWithHttpMessagesAsync(customerId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateSubscriptionsAmendment (beta)
            /// </summary>
            /// <remarks>
            /// Amend subscription quantities for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static SubscriptionsAmendment CreateSubscriptionsAmendment(this IServiceProviderService operations, System.Guid customerId, CreateSubscriptionsAmendmentParameters body = default(CreateSubscriptionsAmendmentParameters), string acceptLanguage = default(string))
            {
                return operations.CreateSubscriptionsAmendmentAsync(customerId, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateSubscriptionsAmendment (beta)
            /// </summary>
            /// <remarks>
            /// Amend subscription quantities for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionsAmendment> CreateSubscriptionsAmendmentAsync(this IServiceProviderService operations, System.Guid customerId, CreateSubscriptionsAmendmentParameters body = default(CreateSubscriptionsAmendmentParameters), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSubscriptionsAmendmentWithHttpMessagesAsync(customerId, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CancelSubscriptions (beta)
            /// </summary>
            /// <remarks>
            /// Cancel subscriptions for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static System.Guid? CancelSubscriptions(this IServiceProviderService operations, SubscriptionsCancellationRequest body, System.Guid customerId, string acceptLanguage = default(string))
            {
                return operations.CancelSubscriptionsAsync(body, customerId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CancelSubscriptions (beta)
            /// </summary>
            /// <remarks>
            /// Cancel subscriptions for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Guid?> CancelSubscriptionsAsync(this IServiceProviderService operations, SubscriptionsCancellationRequest body, System.Guid customerId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelSubscriptionsWithHttpMessagesAsync(body, customerId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetSubscriptionsAmendmentStatus (beta)
            /// </summary>
            /// <remarks>
            /// Get the status of a subscriptions amendment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionsAmendmentId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static string GetSubscriptionsAmendmentStatus(this IServiceProviderService operations, System.Guid subscriptionsAmendmentId, string acceptLanguage = default(string))
            {
                return operations.GetSubscriptionsAmendmentStatusAsync(subscriptionsAmendmentId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetSubscriptionsAmendmentStatus (beta)
            /// </summary>
            /// <remarks>
            /// Get the status of a subscriptions amendment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionsAmendmentId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSubscriptionsAmendmentStatusAsync(this IServiceProviderService operations, System.Guid subscriptionsAmendmentId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsAmendmentStatusWithHttpMessagesAsync(subscriptionsAmendmentId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetSubscriptionsCancellationStatus (beta)
            /// </summary>
            /// <remarks>
            /// Get the status of a subscriptions cancellation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionsCancellationId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static string GetSubscriptionsCancellationStatus(this IServiceProviderService operations, System.Guid subscriptionsCancellationId, string acceptLanguage = default(string))
            {
                return operations.GetSubscriptionsCancellationStatusAsync(subscriptionsCancellationId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetSubscriptionsCancellationStatus (beta)
            /// </summary>
            /// <remarks>
            /// Get the status of a subscriptions cancellation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionsCancellationId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSubscriptionsCancellationStatusAsync(this IServiceProviderService operations, System.Guid subscriptionsCancellationId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsCancellationStatusWithHttpMessagesAsync(subscriptionsCancellationId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

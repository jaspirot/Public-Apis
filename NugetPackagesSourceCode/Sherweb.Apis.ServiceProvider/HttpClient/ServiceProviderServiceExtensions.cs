// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.ServiceProvider
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceProviderService.
    /// </summary>
    public static partial class ServiceProviderServiceExtensions
    {
            /// <summary>
            /// GetCustomers (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeDeleted'>
            /// Specify if you want to retrieve deleted customers. Default: False.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static IList<Customer> GetCustomers(this IServiceProviderService operations, bool? includeDeleted = false, string acceptLanguage = default(string))
            {
                return operations.GetCustomersAsync(includeDeleted, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetCustomers (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeDeleted'>
            /// Specify if you want to retrieve deleted customers. Default: False.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Customer>> GetCustomersAsync(this IServiceProviderService operations, bool? includeDeleted = false, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomersWithHttpMessagesAsync(includeDeleted, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetReceivableCharges (beta)
            /// </summary>
            /// <remarks>
            /// Get the amounts that one of your customers owe you for a specific billing
            /// period. There are three types of charges that are included in the data
            /// returned: recurring, usage, and setup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='date'>
            /// Specify a date within the desired billing period. Default: Today.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static ReceivableCharges GetReceivableCharges(this IServiceProviderService operations, System.Guid customerId, System.DateTime? date = default(System.DateTime?), string acceptLanguage = default(string))
            {
                return operations.GetReceivableChargesAsync(customerId, date, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetReceivableCharges (beta)
            /// </summary>
            /// <remarks>
            /// Get the amounts that one of your customers owe you for a specific billing
            /// period. There are three types of charges that are included in the data
            /// returned: recurring, usage, and setup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='date'>
            /// Specify a date within the desired billing period. Default: Today.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReceivableCharges> GetReceivableChargesAsync(this IServiceProviderService operations, System.Guid customerId, System.DateTime? date = default(System.DateTime?), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReceivableChargesWithHttpMessagesAsync(customerId, date, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

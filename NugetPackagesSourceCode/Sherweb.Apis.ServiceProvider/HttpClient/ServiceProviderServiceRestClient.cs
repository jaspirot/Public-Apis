// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Sherweb.Apis.ServiceProvider.Models;

namespace Sherweb.Apis.ServiceProvider
{
    internal partial class ServiceProviderServiceRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServiceProviderServiceRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public ServiceProviderServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetCustomersRequest(bool? includeDeleted, string acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/customers", false);
            if (includeDeleted != null)
            {
                uri.AppendQuery("includeDeleted", includeDeleted.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all your customers. </summary>
        /// <param name="includeDeleted"> Specify if you want to retrieve deleted customers. Default: False. </param>
        /// <param name="acceptLanguage"> Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<Customer>>> GetCustomersAsync(bool? includeDeleted = null, string acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCustomersRequest(includeDeleted, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Customer> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<Customer> array = new List<Customer>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Customer.DeserializeCustomer(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all your customers. </summary>
        /// <param name="includeDeleted"> Specify if you want to retrieve deleted customers. Default: False. </param>
        /// <param name="acceptLanguage"> Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<Customer>> GetCustomers(bool? includeDeleted = null, string acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCustomersRequest(includeDeleted, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<Customer> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<Customer> array = new List<Customer>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(Customer.DeserializeCustomer(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReceivableChargesRequest(Guid customerId, DateTimeOffset? date, string acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/billing/receivable-charges", false);
            uri.AppendQuery("customerId", customerId, true);
            if (date != null)
            {
                uri.AppendQuery("date", date.Value, "D", true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get your receivable charges data for a specific customer and a specific billing period. </summary>
        /// <param name="customerId"> The Uuid to use. </param>
        /// <param name="date"> Specify a date within the desired billing period. Default: Today. </param>
        /// <param name="acceptLanguage"> Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ReceivableCharges>> GetReceivableChargesAsync(Guid customerId, DateTimeOffset? date = null, string acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReceivableChargesRequest(customerId, date, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReceivableCharges value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReceivableCharges.DeserializeReceivableCharges(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get your receivable charges data for a specific customer and a specific billing period. </summary>
        /// <param name="customerId"> The Uuid to use. </param>
        /// <param name="date"> Specify a date within the desired billing period. Default: Today. </param>
        /// <param name="acceptLanguage"> Specify language (and culture) following [RFC 7231, section 5.3.5: Accept-Language]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ReceivableCharges> GetReceivableCharges(Guid customerId, DateTimeOffset? date = null, string acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReceivableChargesRequest(customerId, date, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReceivableCharges value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReceivableCharges.DeserializeReceivableCharges(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
